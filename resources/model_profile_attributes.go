/*
Chains lab profile service

profile service docs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ProfileAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileAttributes{}

// ProfileAttributes struct for ProfileAttributes
type ProfileAttributes struct {
	// Username
	Username string `json:"username"`
	// Pseudonym
	Pseudonym *string `json:"pseudonym,omitempty"`
	// Description
	Description *string `json:"description,omitempty"`
	// Avatar URL
	Avatar *string `json:"avatar,omitempty"`
	// Is Official Account
	Official bool `json:"official"`
	// sex prikin'
	Sex *string `json:"sex,omitempty"`
	// Birthday
	Birthdate *time.Time `json:"birthdate,omitempty"`
	// Updated At
	UpdatedAt time.Time `json:"updated_at"`
	// Created At
	CreatedAt time.Time `json:"created_at"`
}

type _ProfileAttributes ProfileAttributes

// NewProfileAttributes instantiates a new ProfileAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileAttributes(username string, official bool, updatedAt time.Time, createdAt time.Time) *ProfileAttributes {
	this := ProfileAttributes{}
	this.Username = username
	this.Official = official
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	return &this
}

// NewProfileAttributesWithDefaults instantiates a new ProfileAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileAttributesWithDefaults() *ProfileAttributes {
	this := ProfileAttributes{}
	return &this
}

// GetUsername returns the Username field value
func (o *ProfileAttributes) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *ProfileAttributes) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *ProfileAttributes) SetUsername(v string) {
	o.Username = v
}

// GetPseudonym returns the Pseudonym field value if set, zero value otherwise.
func (o *ProfileAttributes) GetPseudonym() string {
	if o == nil || IsNil(o.Pseudonym) {
		var ret string
		return ret
	}
	return *o.Pseudonym
}

// GetPseudonymOk returns a tuple with the Pseudonym field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileAttributes) GetPseudonymOk() (*string, bool) {
	if o == nil || IsNil(o.Pseudonym) {
		return nil, false
	}
	return o.Pseudonym, true
}

// HasPseudonym returns a boolean if a field has been set.
func (o *ProfileAttributes) HasPseudonym() bool {
	if o != nil && !IsNil(o.Pseudonym) {
		return true
	}

	return false
}

// SetPseudonym gets a reference to the given string and assigns it to the Pseudonym field.
func (o *ProfileAttributes) SetPseudonym(v string) {
	o.Pseudonym = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ProfileAttributes) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileAttributes) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ProfileAttributes) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ProfileAttributes) SetDescription(v string) {
	o.Description = &v
}

// GetAvatar returns the Avatar field value if set, zero value otherwise.
func (o *ProfileAttributes) GetAvatar() string {
	if o == nil || IsNil(o.Avatar) {
		var ret string
		return ret
	}
	return *o.Avatar
}

// GetAvatarOk returns a tuple with the Avatar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileAttributes) GetAvatarOk() (*string, bool) {
	if o == nil || IsNil(o.Avatar) {
		return nil, false
	}
	return o.Avatar, true
}

// HasAvatar returns a boolean if a field has been set.
func (o *ProfileAttributes) HasAvatar() bool {
	if o != nil && !IsNil(o.Avatar) {
		return true
	}

	return false
}

// SetAvatar gets a reference to the given string and assigns it to the Avatar field.
func (o *ProfileAttributes) SetAvatar(v string) {
	o.Avatar = &v
}

// GetOfficial returns the Official field value
func (o *ProfileAttributes) GetOfficial() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Official
}

// GetOfficialOk returns a tuple with the Official field value
// and a boolean to check if the value has been set.
func (o *ProfileAttributes) GetOfficialOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Official, true
}

// SetOfficial sets field value
func (o *ProfileAttributes) SetOfficial(v bool) {
	o.Official = v
}

// GetSex returns the Sex field value if set, zero value otherwise.
func (o *ProfileAttributes) GetSex() string {
	if o == nil || IsNil(o.Sex) {
		var ret string
		return ret
	}
	return *o.Sex
}

// GetSexOk returns a tuple with the Sex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileAttributes) GetSexOk() (*string, bool) {
	if o == nil || IsNil(o.Sex) {
		return nil, false
	}
	return o.Sex, true
}

// HasSex returns a boolean if a field has been set.
func (o *ProfileAttributes) HasSex() bool {
	if o != nil && !IsNil(o.Sex) {
		return true
	}

	return false
}

// SetSex gets a reference to the given string and assigns it to the Sex field.
func (o *ProfileAttributes) SetSex(v string) {
	o.Sex = &v
}

// GetBirthdate returns the Birthdate field value if set, zero value otherwise.
func (o *ProfileAttributes) GetBirthdate() time.Time {
	if o == nil || IsNil(o.Birthdate) {
		var ret time.Time
		return ret
	}
	return *o.Birthdate
}

// GetBirthdateOk returns a tuple with the Birthdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileAttributes) GetBirthdateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Birthdate) {
		return nil, false
	}
	return o.Birthdate, true
}

// HasBirthdate returns a boolean if a field has been set.
func (o *ProfileAttributes) HasBirthdate() bool {
	if o != nil && !IsNil(o.Birthdate) {
		return true
	}

	return false
}

// SetBirthdate gets a reference to the given time.Time and assigns it to the Birthdate field.
func (o *ProfileAttributes) SetBirthdate(v time.Time) {
	o.Birthdate = &v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ProfileAttributes) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ProfileAttributes) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ProfileAttributes) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ProfileAttributes) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ProfileAttributes) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ProfileAttributes) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

func (o ProfileAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	if !IsNil(o.Pseudonym) {
		toSerialize["pseudonym"] = o.Pseudonym
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Avatar) {
		toSerialize["avatar"] = o.Avatar
	}
	toSerialize["official"] = o.Official
	if !IsNil(o.Sex) {
		toSerialize["sex"] = o.Sex
	}
	if !IsNil(o.Birthdate) {
		toSerialize["birthdate"] = o.Birthdate
	}
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *ProfileAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
		"official",
		"updated_at",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProfileAttributes := _ProfileAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProfileAttributes)

	if err != nil {
		return err
	}

	*o = ProfileAttributes(varProfileAttributes)

	return err
}

type NullableProfileAttributes struct {
	value *ProfileAttributes
	isSet bool
}

func (v NullableProfileAttributes) Get() *ProfileAttributes {
	return v.value
}

func (v *NullableProfileAttributes) Set(val *ProfileAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileAttributes(val *ProfileAttributes) *NullableProfileAttributes {
	return &NullableProfileAttributes{value: val, isSet: true}
}

func (v NullableProfileAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


