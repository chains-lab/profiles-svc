/*
Chains lab profile service

profile service docs

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"encoding/json"
	"github.com/google/uuid"
	"bytes"
	"fmt"
)

// checks if the UpdateProfileData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateProfileData{}

// UpdateProfileData struct for UpdateProfileData
type UpdateProfileData struct {
	// user id
	Id uuid.UUID `json:"id"`
	Type string `json:"type"`
	Attributes UpdateProfileDataAttributes `json:"attributes"`
}

type _UpdateProfileData UpdateProfileData

// NewUpdateProfileData instantiates a new UpdateProfileData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProfileData(id uuid.UUID, type_ string, attributes UpdateProfileDataAttributes) *UpdateProfileData {
	this := UpdateProfileData{}
	this.Id = id
	this.Type = type_
	this.Attributes = attributes
	return &this
}

// NewUpdateProfileDataWithDefaults instantiates a new UpdateProfileData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProfileDataWithDefaults() *UpdateProfileData {
	this := UpdateProfileData{}
	return &this
}

// GetId returns the Id field value
func (o *UpdateProfileData) GetId() uuid.UUID {
	if o == nil {
		var ret uuid.UUID
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdateProfileData) GetIdOk() (*uuid.UUID, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdateProfileData) SetId(v uuid.UUID) {
	o.Id = v
}

// GetType returns the Type field value
func (o *UpdateProfileData) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UpdateProfileData) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UpdateProfileData) SetType(v string) {
	o.Type = v
}

// GetAttributes returns the Attributes field value
func (o *UpdateProfileData) GetAttributes() UpdateProfileDataAttributes {
	if o == nil {
		var ret UpdateProfileDataAttributes
		return ret
	}

	return o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value
// and a boolean to check if the value has been set.
func (o *UpdateProfileData) GetAttributesOk() (*UpdateProfileDataAttributes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributes, true
}

// SetAttributes sets field value
func (o *UpdateProfileData) SetAttributes(v UpdateProfileDataAttributes) {
	o.Attributes = v
}

func (o UpdateProfileData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateProfileData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	toSerialize["attributes"] = o.Attributes
	return toSerialize, nil
}

func (o *UpdateProfileData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"attributes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateProfileData := _UpdateProfileData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateProfileData)

	if err != nil {
		return err
	}

	*o = UpdateProfileData(varUpdateProfileData)

	return err
}

type NullableUpdateProfileData struct {
	value *UpdateProfileData
	isSet bool
}

func (v NullableUpdateProfileData) Get() *UpdateProfileData {
	return v.value
}

func (v *NullableUpdateProfileData) Set(val *UpdateProfileData) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProfileData) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProfileData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProfileData(val *UpdateProfileData) *NullableUpdateProfileData {
	return &NullableUpdateProfileData{value: val, isSet: true}
}

func (v NullableUpdateProfileData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProfileData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


